{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Google telephonic interview-found on leetcode\n",
    "\n",
    "Given an array A that is a permutation of n numbers [1-n]. Find the number of subarrarys S that meets the following \n",
    "condition max(S) - min(S) = length(S) - 1.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4, 3, 1, 2, 5]\n",
      "[4, 3, 1, 2]\n",
      "[4, 3, 1]\n",
      "[4, 3]\n",
      "[4]\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    "A=[4, 3, 1, 2, 5]\n",
    "stop=len(A)\n",
    "start=0\n",
    "\n",
    "for i in range(len(A)):\n",
    "    \n",
    "    while i <= stop:\n",
    "        print(A[i:stop])\n",
    "        stop-=1\n",
    "        \n",
    "#     i+=1\n",
    "        \n",
    "#     else:\n",
    "#         stop-=1\n",
    "       \n",
    "        \n",
    "        \n",
    "\n",
    " \n",
    "        \n",
    "        \n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "4\n",
      "3\n",
      "2\n",
      "1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[[4, 3, 1, 2, 5], [4, 3, 1, 2], [4, 3, 1], [4, 3], [4]]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A=[4, 3, 1, 2, 5]\n",
    "stop=len(A)\n",
    "start=0\n",
    "res1=[]\n",
    "\n",
    "\n",
    "while stop > start:\n",
    "    if stop >= 1:\n",
    "        print(stop)\n",
    "        res1.append(A[start : stop])\n",
    "        stop-=1\n",
    "        \n",
    "    else:\n",
    "        start+=1\n",
    "        \n",
    "        \n",
    "    \n",
    "res1   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "4\n",
      "3\n",
      "2\n",
      "1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[[4, 3, 1, 2, 5], [4, 3, 1, 2], [4, 3, 1], [4, 3], [4]]"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "i got the while part but could not form the complete solution without the for loop. \n",
    "\n",
    "the idea that if you want to repeat a particular process for every i then while loop for every i i.e., while loop within\n",
    "for loop is one of the ways - O(n)\n",
    "\n",
    "A=[4, 3, 1, 2, 5]\n",
    "stop=len(A)\n",
    "start=0\n",
    "res1=[]\n",
    "\n",
    "\n",
    "while start < stop:\n",
    "    print(stop)\n",
    "    res1.append(A[start : stop])\n",
    "    stop-=1\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        \n",
    "\n",
    "        \n",
    "    \n",
    "res1   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "no idea how this works... will get back to this later. moving on for now!\n",
    "def allSubArrays(L,L2=None):\n",
    "    if L2==None:\n",
    "\n",
    "        L2 = L[:-1]\n",
    "\n",
    "    if L==[]:\n",
    "        if L2==[]:\n",
    "            return []\n",
    "        return allSubArrays(L2,L2[:-1])\n",
    "    return [L]+allSubArrays(L[1:],L2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[4, 3, 1, 2, 5],\n",
       " [3, 1, 2, 5],\n",
       " [1, 2, 5],\n",
       " [2, 5],\n",
       " [5],\n",
       " [4, 3, 1, 2],\n",
       " [3, 1, 2],\n",
       " [1, 2],\n",
       " [2],\n",
       " [4, 3, 1],\n",
       " [3, 1],\n",
       " [1],\n",
       " [4, 3],\n",
       " [3],\n",
       " [4]]"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "allSubArrays([4, 3, 1, 2, 5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[4, 3, 1, 2]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AF=[4, 3, 1, 2, 5]\n",
    "AF[:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "# max(S) - min(S) = length(S) - 1\n",
    "\n",
    "this is the right solution - revised version of the same solution below this cell\n",
    "def sub_lists(my_list):\n",
    "    result = []\n",
    "    for i in range(len(my_list)):\n",
    "        n = i+1\n",
    "        while n <= len(my_list):\n",
    "            sub = my_list[i:n]\n",
    "            if (max(sub)-min(sub))==(len(sub)-1):\n",
    "                result.append(sub)\n",
    "            n += 1\n",
    "\n",
    "    return len(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sub_lists([4, 3, 1, 2, 5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "#but instead of appending to a data structure the optimal way of returning the result\n",
    "#is to just introduce a count variable and keep track of the number of arrays that satisfy the condition \n",
    "#in the question\n",
    "\n",
    "An optimal solution\n",
    "\n",
    "def sub_lists(my_list):\n",
    "    number_arrays=0\n",
    "    for i in range(len(my_list)):\n",
    "        n = i+1\n",
    "        while n <= len(my_list):\n",
    "            sub = my_list[i:n]\n",
    "            if (max(sub)-min(sub))==(len(sub)-1):\n",
    "                number_arrays+=1\n",
    "            n += 1\n",
    "\n",
    "    return number_arrays\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sub_lists([4, 3, 1, 2, 5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sub_lists1(my_list):\n",
    "    result = []\n",
    "    for i in range(len(my_list)):\n",
    "        n = i+1\n",
    "        if n <= len(my_list):\n",
    "            sub = my_list[i:n]\n",
    "            if (max(sub)-min(sub))==(len(sub)-1):\n",
    "                result.append(sub)\n",
    "            n += 1\n",
    "\n",
    "    return result\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[4], [3], [1], [2], [5]]"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sub_lists1([4, 3, 1, 2, 5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "A=[4, 3, 1, 2, 5]\n",
    "stop=len(A)\n",
    "start=0\n",
    "\n",
    "res=[]\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[4, 3, 1, 2, 5], [3, 1, 2], [1], [], []]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "this is what contiguous sub arrays mean:\n",
    "    \n",
    "[4]\n",
    "[4,3]\n",
    "[4,3,1]\n",
    "[4,3,1,2]\n",
    "[4,3,1,2,5]\n",
    "\n",
    "3\n",
    "3, 1\n",
    "3,1, 2\n",
    "3,1, 2,5\n",
    "\n",
    "1\n",
    "1,2\n",
    "1,2,5\n",
    "\n",
    "2\n",
    "2, 5\n",
    "\n",
    "5"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
